

PASSING_TESTS := \
ASLSemanticsReference.t/SemanticsRule.ATCNotDynamicErrorIfFalse.asl \
ASLSemanticsReference.t/SemanticsRule.Lit.asl \
ASLSemanticsReference.t/SemanticsRule.EGlobalVar.asl \
ASLSemanticsReference.t/SemanticsRule.ELocalVar.asl \
ASLSemanticsReference.t/SemanticsRule.ELocalVar.asl \
ASLSemanticsReference.t/SemanticsRule.EGlobalVarError.asl \
ASLSemanticsReference.t/SemanticsRule.EBinopPlusPrint.asl \
ASLSemanticsReference.t/SemanticsRule.EBinopPlusAssert.asl \
ASLSemanticsReference.t/SemanticsRule.EUnopAssert.asl \
ASLSemanticsReference.t/SemanticsRule.ECondFALSE.asl \
ASLSemanticsReference.t/SemanticsRule.ESlice.asl \
ASLSemanticsReference.t/SemanticsRule.ECall.asl \
ASLSemanticsReference.t/SemanticsRule.EGetArray.asl \
ASLSemanticsReference.t/SemanticsRule.EConcat.asl \
ASLSemanticsReference.t/SemanticsRule.EPattern.asl \
ASLSemanticsReference.t/SemanticsRule.LELocalVar.asl \
ASLSemanticsReference.t/SemanticsRule.LESetArray.asl \
ASLSemanticsReference.t/SemanticsRule.SReturnNone.asl \
ASLSemanticsReference.t/SemanticsRule.SCond.asl \
ASLSemanticsReference.t/SemanticsRule.SCase.asl \
ASLSemanticsReference.t/SemanticsRule.SWhile.asl \
ASLSemanticsReference.t/SemanticsRule.SRepeat.asl \
ASLSemanticsReference.t/SemanticsRule.SFor.asl \
ASLSemanticsReference.t/SemanticsRule.Loop.asl \
ASLSemanticsReference.t/SemanticsRule.For.asl \
ASLSemanticsReference.t/SemanticsRule.FCall.asl \
ASLSemanticsReference.t/SemanticsRule.PAll.asl \
ASLSemanticsReference.t/SemanticsRule.PAny.asl \
ASLSemanticsReference.t/SemanticsRule.PGeq.asl \
ASLSemanticsReference.t/SemanticsRule.PLeq.asl \
ASLSemanticsReference.t/SemanticsRule.PNot.asl \
ASLSemanticsReference.t/SemanticsRule.PRange.asl \
ASLSemanticsReference.t/SemanticsRule.PSingle.asl \
ASLSemanticsReference.t/SemanticsRule.ATCValue.asl \
ASLSemanticsReference.t/SemanticsRule.LEDestructuring.asl \
ASLSemanticsReference.t/SemanticsRule.SliceSingle.asl \
ASLSemanticsReference.t/SemanticsRule.SliceLength.asl \
ASLSemanticsReference.t/SemanticsRule.SliceRange.asl \
ASLSemanticsReference.t/SemanticsRule.SliceStar.asl \
ASLSemanticsReference.t/SemanticsRule.LDTypedTuple.asl \
ASLSemanticsReference.t/SemanticsRule.LDTypedVar.asl \
ASLSemanticsReference.t/SemanticsRule.LDTyped.asl \
ASLSemanticsReference.t/SemanticsRule.LDUninitialisedTyped.asl \
ASLSemanticsReference.t/SemanticsRule.SAssign.asl \
ASLSemanticsReference.t/SemanticsRule.SCall.asl \
ASLSemanticsReference.t/SemanticsRule.SDeclNone.asl \
ASLSemanticsReference.t/SemanticsRule.SDeclSome.asl \
ASLSemanticsReference.t/SemanticsRule.SPass.asl \
ASLSemanticsReference.t/SemanticsRule.SReturnOne.asl \
ASLSemanticsReference.t/SemanticsRule.SSeq.asl \
ASLSemanticsReference.t/SemanticsRule.Block.asl \
ASLSemanticsReference.t/SemanticsRule.SAssignCall.asl \
ASLSemanticsReference.t/SemanticsRule.SAssignTuple.asl \
ASLSemanticsReference.t/SemanticsRule.EBinopImplExFalso.asl \
ASLSemanticsReference.t/SemanticsRule.EBinopOrTrue.asl \
ASLSemanticsReference.t/SemanticsRule.SAssertOk.asl \
ASLSemanticsReference.t/SemanticsRule.LEDiscard.asl \
ASLSemanticsReference.t/SemanticsRule.LDDiscard.asl \
ASLSemanticsReference.t/SemanticsRule.EConcat2.asl \
ASLSemanticsReference.t/SemanticsRule.LEGlobalVar.asl \
ASLSemanticsReference.t/SemanticsRule.SCond2.asl \
ASLSemanticsReference.t/SemanticsRule.SCond3.asl \
ASLSemanticsReference.t/SemanticsRule.SCond4.asl \
ASLSemanticsReference.t/SemanticsRule.EGetEnumArray.asl \
ASLSemanticsReference.t/SemanticsRule.EBinopAndFalse.asl \
ASLSemanticsReference.t/SemanticsRule.ETuple.asl \
ASLSemanticsReference.t/SemanticsRule.PTuple.asl \
ASLSemanticsReference.t/SemanticsRule.LESlice.asl \
ASLSemanticsReference.t/SemanticsRule.PMask.asl \
ASLSemanticsReference.t/SemanticsRule.LDTuple.asl \
ASLSemanticsReference.t/SemanticsRule.LESetField.asl \
ASLSemanticsReference.t/SemanticsRule.ERecord.asl \
ASLSemanticsReference.t/SemanticsRule.SPrint.asl \
stdlib.t/align.asl \
stdlib.t/sint.asl \
stdlib.t/pow2.asl \
stdlib.t/log2.asl \
stdlib.t/ilog2.asl \
stdlib.t/misc.asl \
stdlib.t/uint.asl \
stdlib.t/round.asl \
stdlib.t/sqrt.asl \
stdlib.t/bits.asl \
regressions.t/lhs-tuple-fields.asl \
regressions.t/concat02.asl \
regressions.t/bitvectors.asl \
regressions.t/record-getfields.asl \
regressions.t/single-slice.asl \
regressions.t/getter_subfields.asl \
regressions.t/getter_subslice.asl \
regressions.t/getter_sub_tuple.asl \
regressions.t/getter_subfield.asl \
regressions.t/setter_subfield.asl \
regressions.t/base_values_tuple.asl \
regressions.t/constant-functions.asl \
regressions.t/tuples.asl \
regressions.t/records.asl \
regressions.t/records-2.asl \
regressions.t/masks.asl \
regressions.t/global_vars-02.asl \
regressions.t/func7.asl \
regressions.t/constrained-types-example.asl \
regressions.t/bitfields.asl \
regressions.t/rename-returned-tuples.asl \
regressions.t/hello_world.asl \
regressions.t/constant-zeros.asl \
regressions.t/named-types-in-slices.asl \
regressions.t/bad-shift.asl \
regressions.t/tuple_items.asl \
regressions.t/cases_where.asl \
regressions.t/slice-width-shorthand.asl \
regressions.t/enum-array.asl \
regressions.t/anonymous-types-example-success.asl \
regressions.t/array-with-enums.asl \
regressions.t/array.asl \
regressions.t/assign1.asl \
regressions.t/big-ints.asl \
regressions.t/case.asl \
regressions.t/concat01.asl \
regressions.t/concat03.asl \
regressions.t/division.asl \
regressions.t/func1.asl \
regressions.t/func2.asl \
regressions.t/func3.asl \
regressions.t/func4.asl \
regressions.t/func5.asl \
regressions.t/func6.asl \
regressions.t/func7.asl \
regressions.t/global_vars.asl \
regressions.t/more-assignments-examples.asl \
regressions.t/more-invocation-examples.asl \
regressions.t/named-types-example.asl \
regressions.t/nested-bitfields.asl \
regressions.t/pass.asl \
regressions.t/patterns.asl \
regressions.t/pattern-string.asl \
regressions.t/static.asl \
regressions.t/subtypes-example.asl \
regressions.t/declaration-primitive-local.asl \
regressions.t/inherit-integer-constraints.asl \

#regressions.t/exceptions.asl \    unsupported :s_try 
#regressions.t/constrained-integer-types-example.asl \  unsuported :e_arbitrary
#regressions.t/array-lca.asl \  unsuported :e_arbitrary
#regressions.t/operator_precedence.asl \  runs forever
#regressions.t/subtypes-with.asl \  not ast-p :ast

FAILING_TESTS := \
side-effects.t/rec-binop-unknown.asl \
side-effects.t/assert-unknown.asl \
side-effects.t/constant-func-local-type-local-let.asl \
side-effects.t/constant-func-throw-caught.asl \
side-effects.t/binop-unknown-unknown.asl \
side-effects.t/binop-write-unknown.asl \
side-effects.t/binop-throw-unknown.asl \
side-effects.t/binop-throw-otherwised.asl \
side-effects.t/binop-throw-caught.asl \
side-effects.t/binop-throw-read.asl \
regressions.t/exceptions.asl \
regressions.t/constrained-integer-types-example.asl \
regressions.t/array-lca.asl \
regressions.t/operator_precedence.asl \
regressions.t/subtypes-with.asl \
control-flow.t/try-03.asl \
control-flow.t/try-02.asl \
control-flow.t/try-00.asl \
control-flow.t/always-throw.asl \
ASLSemanticsReference.t/SemanticsRule.SThrowNone.asl \
ASLSemanticsReference.t/SemanticsRule.SThrowSomeTyped.asl \
ASLSemanticsReference.t/SemanticsRule.CatchNamed.asl \
ASLSemanticsReference.t/SemanticsRule.SReturnSome.asl \
ASLSemanticsReference.t/SemanticsRule.STry.asl \
ASLSemanticsReference.t/SemanticsRule.EArbitraryInteger0.asl \
ASLSemanticsReference.t/SemanticsRule.EArbitraryIntegerRange3-42-3.asl \
ASLSemanticsReference.t/SemanticsRule.EArbitraryArray.asl \
ASLSemanticsReference.t/SemanticsRule.Catch.asl \
ASLSemanticsReference.t/SemanticsRule.CatchOtherwise.asl \
ASLSemanticsReference.t/SemanticsRule.SReturnSome.asl \
ASLSemanticsReference.t/EvalCatchers.asl \
ASLSemanticsReference.t/SemanticsRule.CatchNoThrow.asl \
ASLSemanticsReference.t/SemanticsRule.LESlice.asl \
control-flow.t/with-return.asl \
control-flow.t/if-return-return.asl \
control-flow.t/if-return-throw.asl \
division.t/examples.asl \
division.t/div-multi-slices.asl \
division.t/zero-pow-zero.asl \
explicit-parameters.t/explicit-parameters.asl \
loop-limits.t/while-correct.asl \
loop-limits.t/while-exact.asl \
loop-limits.t/while-no-limit.asl \
loop-limits.t/repeat-correct.asl \
loop-limits.t/repeat-exact.asl \
loop-limits.t/repeat-no-limit.asl \
loop-limits.t/double-while-correct-correct.asl \
loop-limits.t/for-exact-minus-one.asl \
loop-limits.t/for-no-limit.asl \
loop-limits.t/recursion-no-limit.asl \
loop-limits.t/recursion-correct.asl \
loop-limits.t/recursion-exact.asl \
recursive.t/simple-recursive.asl \
recursive.t/double-recursive.asl \
recursive.t/double-recursive-without-limit.asl \
recursive.t/enum-fn-recursive.asl \
side-effects.t/binop-read-read.asl \
side-effects.t/binop-read-write-diff.asl \
side-effects.t/binop-write-write-diff.asl \
side-effects.t/bool-binop-write-write.asl \
side-effects.t/constant-func.asl \
side-effects.t/constant-func-local-var.asl \
side-effects.t/for-var-no-edit.asl \
side-effects.t/while-var-edits.asl \
side-effects.t/repeat-var-edits.asl \
side-effects.t/for-read.asl \
side-effects.t/config-uses-constant.asl \
side-effects.t/config-uses-local-var.asl \
side-effects.t/config-uses-local-let.asl \
side-effects.t/config-uses-local-constant.asl \
side-effects.t/config-uses-constant-through-func.asl \
side-effects.t/assert-read.asl \
side-effects.t/type-read-config.asl \
side-effects.t/type-read-constant.asl \
side-effects.t/type-read-let.asl \
side-effects.t/type-read-local-let.asl \
side-effects.t/type-func-local-var.asl \
side-effects.t/assert-read.asl \
side-effects.t/rec-binop-read-local.asl \
side-effects.t/rec-constant.asl \
side-effects.t/print-var.asl \
side-effects.t/global-var-initialisation.asl \
side-effects.t/constant-func-local-type-local-let.asl \

ERRORING_TESTS := \
ASLSemanticsReference.t/SemanticsRule.EGetArrayTooSmall.asl \
ASLSemanticsReference.t/SemanticsRule.EArbitraryInteger3.asl \
ASLSemanticsReference.t/SemanticsRule.EArbitraryIntegerRange3-42-42.asl \
ASLSemanticsReference.t/SemanticsRule.SAssertNo.asl \
ASLSemanticsReference.t/SemanticsRule.ATCVariousErrors.asl \


PASSING_TARGETS := $(patsubst %.asl,%.pass,$(PASSING_TESTS))


all : $(PASSING_TARGETS)

FAILING_TARGETS := $(patsubst %.asl,%.pass,$(FAILING_TESTS))
failing : $(FAILING_TARGETS)

TESTDIR := $(shell cd ../../tests; pwd)

%.pass :
	@asl=$(patsubst %.pass,%.asl,$@) ;\
	echo Test: $$asl ;\
	mkdir -p $$asl ;\
	( cd $$asl ; $(CURDIR)/run.sh $(TESTDIR)/$$asl )
	@touch $@



.PHONY: clean
clean :
	@rm -f $(PASSING_TARGETS) $(FAILING_TARGETS)
